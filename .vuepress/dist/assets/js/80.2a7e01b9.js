(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{404:function(t,s,e){"use strict";e.r(s);var o=e(33),r=Object(o.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_10-结构（struct）与方法（method）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-结构（struct）与方法（method）"}},[t._v("#")]),t._v(" 10 结构（struct）与方法（method）")]),t._v(" "),e("p",[t._v("Go 通过类型别名（alias types）和结构体的形式支持用户自定义类型，或者叫定制类型。一个带属性的结构体试图表示一个现实世界中的实体。结构体是复合类型（composite types），当需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据，就好像它是一个独立实体的一部分。结构体也是值类型，因此可以通过 "),e("strong",[t._v("new")]),t._v(" 函数来创建。")]),t._v(" "),e("p",[t._v("组成结构体类型的那些数据称为 "),e("strong",[t._v("字段（fields）")]),t._v("。每个字段都有一个类型和一个名字；在一个结构体中，字段名字必须是唯一的。")]),t._v(" "),e("p",[t._v("结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type），在一些老的编程语言中叫 "),e("strong",[t._v("记录（Record）")]),t._v("，比如 Cobol，在 C 家族的编程语言中它也存在，并且名字也是 "),e("strong",[t._v("struct")]),t._v("，在面向对象的编程语言中，跟一个无方法的轻量级类一样。不过因为 Go 语言中没有类的概念，因此在 Go 中结构体有着更为重要的地位。")])])}),[],!1,null,null,null);s.default=r.exports}}]);